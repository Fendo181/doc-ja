<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 52407313885d27a4e891e08dd2e2481bcc39e244 Maintainer: mumumu Status: ready -->
<sect1 xml:id="language.operators.increment">
 <title>加算子/減算子</title>
 <para>
  PHP は C 言語形式の加算子/減算子（前置・後置ともに）をサポートします。
 </para>
 <note>
  <simpara>
   加算子/減算子は、数値や文字列にしか影響を及ぼしません。
   配列やオブジェクト、boolean、そしてリソースには、何も変更を加えません。
   同じく &null; に減算子を適用しても何も起こりませんが、&null; に加算子を
   適用すると <literal>1</literal> となります。
  </simpara>
 </note>
 <table>
  <title>加算子/減算子</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>例</entry>
     <entry>名前</entry>
     <entry>効果</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>++$a</entry>
     <entry>前置加算子</entry>
     <entry><varname>$a</varname> に 1 を加え、<varname>$a</varname> を返します。</entry>
    </row>
    <row>
     <entry>$a++</entry>
     <entry>後置加算子</entry>
     <entry><varname>$a</varname> を返し、<varname>$a</varname> に1を加えます。</entry>
    </row>
    <row>
     <entry>--$a</entry>
     <entry>前置減算子</entry>
     <entry><varname>$a</varname> から 1 を引き、<varname>$a</varname> を返します。</entry>
    </row>
    <row>
     <entry>$a--</entry>
     <entry>後置減算子</entry>
     <entry><varname>$a</varname> を返し、<varname>$a</varname> から 1 を引きます。</entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 <para>
  以下に簡単なスクリプトの例を示します。
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
echo "<h3>後置加算</h3>";
$a = 5;
echo "5 となります: " . $a++ . "<br>\n";
echo "6 となります: " . $a . "<br>\n";
 
echo "<h3>前置加算</h3>";
$a = 5;
echo "6 となります: " . ++$a . "<br>\n";
echo "6 となります: " . $a . "<br>\n";

echo "<h3>後置減算</h3>";
$a = 5;
echo "5 となります: " . $a-- . "<br>\n";
echo "4 となります: " . $a . "<br>\n";

echo "<h3>前置減算</h3>";
$a = 5;
echo "4 となります: " . --$a . "<br>\n";
echo "4 となります: " . $a . "<br>\n";
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  PHP は、算術演算子で文字変数を扱った場合に C ではなく Perl の慣習に
  従います。例えば、PHP や Perl では <literal>$a = 'Z'; $a++;</literal>
  の結果として <literal>$a</literal> が <literal>'AA'</literal> になりますが
  C では <literal>a = 'Z'; a++;</literal> の結果として
  <literal>a</literal> は <literal>'['</literal> になります
  (<literal>'Z'</literal> の ASCII 値は 90、そして <literal>'['</literal> の ASCII 値は 91 です)。
  文字変数はインクリメントされることは可能ですがデクリメントは不可能であるということ、
  またプレーンな ASCII 文字と数字 (a-z、A-Z、そして 0-9) のみがサポートされるということに注意しましょう。
  その他の文字変数のインクリメント/デクリメントは何の効果もなく、元の文字列は変更されません。
  <example>
   <title>文字変数に対する算術演算子の使用</title>
   <programlisting role="php">
<![CDATA[
<?php
echo '== Alphabetic strings ==' . PHP_EOL;
$s = 'W';
for ($n=0; $n<6; $n++) {
  echo ++$s . PHP_EOL;
}
// アルファベットと数字が混じった文字列の挙動は異なります
echo '== Alphanumeric strings ==' . PHP_EOL;
$d = 'A8';
for ($n=0; $n<6; $n++) {
  echo ++$d . PHP_EOL;
}
$d = 'A08';
for ($n=0; $n<6; $n++) {
  echo ++$d . PHP_EOL;
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
== Alphabetic strings ==
X
Y
Z
AA
AB
AC
== Alphanumeric strings ==
A9
B0
B1
B2
B3
B4
A09
A10
A11
A12
A13
A14
]]>
   </screen>
  </example>
 </para>
 <para>
  論理型に対する加算/減算は何の影響も及ぼしません。
 </para>
</sect1>
