<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 7ad99aeafea66a1562f668aa3cb11dcc9d9cb951 Maintainer: mumumu Status: working -->
<chapter xml:id="outcontrol.user-level-output-buffers" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>ユーザーレベルの出力バッファ</title>
 <para>
  ユーザレベルの出力バッファは、
  PHP コードから開始、操作、終了することができます。
  バッファは、出力バッファと関連する出力ハンドラ関数を含みます。
 </para>

 <section xml:id="outcontrol.what-output-is-buffered">
  <title>どの出力をバッファするのか？</title>
  <para>
   PHP のユーザレベル出力バッファは、
   起動した後から、バッファリングをオフにするか、
   スクリプトが終わるまでのすべての出力をバッファリングします。
   PHP のユーザーレベル出力バッファにおける出力とは、
   PHP が表示したりブラウザに送り返したりするすべてのものを指します。
   実用的な用語で説明すると、出力とは以下に示す、
   長さがゼロでないデータのことです:
   <itemizedlist>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('outputcontrol.what-is-output')/*)"><xi:fallback/></xi:include>
   </itemizedlist>
  </para>
  <note>
   <simpara>
    <literal>stdout</literal> に直接書き込まれたり、
    同様の機能を持つ SAPI 関数に渡されたデータは、
    ユーザレベルの出力バッファには取り込まれません。
    これに該当するのは、
    <function>fwrite</function> を使って <literal>stdout</literal>
    にデータを書き込む場合や、<function>header</function> や
    <function>setcookie</function> を使ってヘッダを送信する場合です。
   </simpara>
  </note>
 </section>

 <section>
  <title>出力バッファリングをオンにする</title>
  <para>
   出力バッファリングは、&php.ini; 設定
   <link linkend="ini.output-buffering">output_buffering</link>
   と <link linkend="ini.output-handler">output_handler</link>
   を設定するか、<function>ob_start</function> 関数を使うことでオンにできます。
   これらは両方、出力バッファを生成できますが、
   <function>ob_start</function> の方がより柔軟です。
   なぜなら、出力ハンドラをユーザー定義関数として受け入れますし、
   (フラッシュ、クリーン、削除 のような)
   バッファに対する操作もできるからです。
   <function>ob_start</function> で開始したバッファは、
   それをコールした行からアクティブになりますが、
   <link linkend="ini.output-buffering">output_buffering</link>
   を使って開始したバッファは、スクリプトの最初の行から、出力をバッファします。
  </para>
  <para>
   PHP は組み込みの
   <literal>"URL-Rewriter"</literal>
   出力ハンドラをバンドルしています。
   このハンドラは、自分の出力バッファを開始します。
   同時に実行できるのはふたつです(1つはユーザレベルのURL書き換えと、
   透過的なセッションIDサポートのためのもの) 。
   これらのバッファは、<function>output_add_rewrite_var</function>
   関数をコールするか、&php.ini; 設定
   <link linkend="ini.session.use-trans-sid">session.use_trans_sid</link>
   を有効にすることで開始できます。
  </para>
  <para>
   バンドルされている <literal>zlib</literal> 拡張モジュールは、
   独自の出力バッファを持っています。
   この出力バッファは、&php.ini; 設定
   <link linkend="ini.zlib.output-compression">zlib.output_compression</link>
   を使うことで有効にできます。
  </para>
  <note>
   <simpara>
    一度に二つまでしか実行できないという意味で、
    <literal>"URL-Rewriter"</literal> は特別です。
    しかし、すべてのユーザレベルの出力バッファは、
    カスタムの出力ハンドラ関数を指定して <function>ob_start</function>
    をコールすることで開始した既存のバッファと同じものを使います。
    そのため、すべての機能はユーザランドのコードでエミュレートすることができます。
   </simpara>
  </note>
 </section>

 <section xml:id="outcontrol.nesting-output-buffers">
  <title>出力バッファをネストさせる</title>
  <para>
   新しいバッファが開始されたときに、既にアクティブな出力バッファがある場合、
   新しいバッファは、以前にアクティブだったバッファの内部にネストされます。
   ネストされたバッファは、ネストされているかどうかに関係なく同じ動作をしますが、
   ネストされたバッファによってバッファリングされた出力は、
   以前にアクティブだった外側のバッファにはバッファリングされません。
   ネストされたバッファからフラッシュされた出力のみが、
   外側のバッファによってバッファリングされます。
  </para>
  <para>
   ほとんどの <literal>ob_<replaceable>*</replaceable></literal> 
   関数は、アクティブな出力バッファ（最後に開始されたもの）に対してのみ動作するため、
   アクティブなバッファのみをフラッシュ、クリーン、オフにすることができます。
   それ以外のバッファに対して動作する関数は、
   使用中のすべての出力ハンドラのリストを返す
   <function>ob_list_handlers</function> や、
   アクティブなバッファや使用中のすべてのバッファに関する情報を返すことができる
   <function>ob_get_status</function> があります。
  </para>
  <para>
   <function>ob_get_level</function>
   や <function>ob_get_status</function>
   をコールすると、アクティブな出力バッファのネストレベルを返します。
  </para>
  <caution>
   <simpara>
    <function>ob_get_level</function>
    と <function>ob_get_status</function>
    が指す、同じレベルの値は1つずれています。
    <function>ob_get_level</function> では最初のレベルは
    <literal>1</literal> であるのに対し、
    <function>ob_get_status</function> の最初のレベルは 
    <literal>0</literal> になります。
   </simpara>
  </caution>
 </section>

 <section xml:id="outcontrol.buffer-size">
  <title>バッファサイズ</title>
  <para>
   バッファサイズは整数で表され、
   バッファがフラッシュせずに格納できるバイト数を表します。
   バッファ内の出力サイズがバッファサイズを超えると、
   バッファの内容が出力ハンドラに送られ、
   その戻り値がフラッシュされ、バッファがクリアされます。
  </para>
  <para>
   <literal>"URL-Rewriter"</literal> を除いて、
   出力バッファのサイズはバッファの開始時に設定することができます。
   <literal>0</literal> に設定すると、
   出力バッファのサイズは PHP が使用可能なメモリの量に制限されます。
   <literal>1</literal> に設定すると、
   0 より大きい長さの出力を生成するコードブロックの後にバッファがフラッシュされます。
  </para>
  <para>
   出力バッファのサイズは、
   <function>ob_get_status</function> をコールすることで取得できます。
  </para>
  <para>
   <function>ob_start</function> で開始された出力バッファのバッファサイズは、
   2番目のパラメータ <parameter>chunk_size</parameter>
   に渡された整数値に設定されます。省略された場合、
   <literal>0</literal> が設定されます。
  </para>
  <para>
   ini 設定 <link linkend="ini.output-buffering">output_buffering</link>
   が <literal>"On"</literal> に設定されている場合、
   開始された出力バッファのバッファサイズは 0 に設定されます。
   バッファサイズより大きな整数を設定した場合、バッファサイズはその値になります。
  </para>
  <para>
   <literal>"URL-Rewriter"</literal> のバッファサイズは
   <literal>0</literal> に設定されているため、
   PHP が使用可能なメモリの量に制限されます。
  </para>
  <para>
   <literal>zlib</literal> の出力バッファのサイズは、
   &php.ini; の
   <link linkend="ini.zlib.output-compression">zlib.output_compression</link>
   で設定します。
   <literal>"On"</literal>
   に設定すると、バッファサイズは <literal>"16K"</literal>/<literal>16384</literal>
   になります。
   バッファサイズより大きな整数を設定した場合、
   バッファサイズはそのバイト数になります。
  </para>
 </section>

 <section xml:id="outcontrol.operations-on-buffers">
  <title>バッファに対して可能な操作</title>
  <para>
   バッファに対して可能な操作は、
   <link linkend="outcontrol.constants.buffer-control-flags">出力バッファの制御フラグ</link>
   のいずれかを <function>ob_start</function> の3番めの
   <parameter>flags</parameter> パラメータに渡すことで制御できます。
   省略した場合、すべての操作がデフォルトで許可されます。
   <literal>0</literal> を指定すると、
   バッファのフラッシュ、クリーン、削除はできませんが、
   その内容を取得することはできます。
  </para>
  <para>
   <constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant> を指定すると、
   <function>ob_clean</function> によってバッファの内容を削除できるようになります。
  </para>
  <warning>
   <simpara>
    <constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant> フラグ
    を指定していなくても、
    <function>ob_end_clean</function> や <function>ob_get_clean</function> 
    がバッファの内容を削除できなくなるわけではありません。
   </simpara>
  </warning>
  <para>
   <constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant> を指定すると、
   <function>ob_flush</function> を使ってバッファの内容をフラッシュできるようになります。
  </para>
  <warning>
   <simpara>
    <constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant> フラグ
    を指定していなくても、
    <function>ob_end_flush</function> や <function>ob_get_flush</function> 
    がバッファの内容をフラッシュできなくなるわけではありません。
   </simpara>
  </warning>
  <para>
   <constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant> を指定すると、
   <function>ob_end_clean</function>, <function>ob_end_flush</function>,
   <function>ob_get_clean</function>, <function>ob_get_flush</function>
   を使ってバッファをオフにすることができるようになります。
  </para>
  <para>
   <constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant>
   は、既に述べた3つのフラグの組み合わせで、
   指定するとバッファに対する3つの操作を実行できます。
  </para>
 </section>

 <section>
  <title>バッファの内容をフラッシュ/アクセス/削除する</title>
  <para>
   フラッシュは、アクティブなバッファの内容を送信し、破棄します。
   出力バッファは、出力のサイズがバッファのサイズを超えたときか、
   スクリプトが終了するか、
   <function>ob_flush</function>, <function>ob_end_flush</function>,
   <function>ob_get_flush</function>
   のいずれかがコールされたときにフラッシュされます。
  </para>
  <caution>
   <simpara>
    Calling <function>ob_end_flush</function> や <function>ob_get_flush</function>
    をコールすると、アクティブなバッファがオフになります。
   </simpara>
  </caution>
  <caution>
   <simpara>
    バッファをフラッシュすると、
    出力バッファの戻り値がフラッシュされますが、
    この値はバッファの内容と異なる場合があります。
    例えば、<function>ob_gzhandler</function>
    を使うと、出力が圧縮され、圧縮された出力がフラッシュされます。
   </simpara>
  </caution>
  <para>
   アクティブなバッファの内容は
   <function>ob_get_contents</function>, <function>ob_get_clean</function>,
   <function>ob_get_flush</function> をコールすると取得できます。
  </para>
  <para>
   バッファの中身の長さだけが必要な場合、
   <function>ob_get_length</function> や <function>ob_get_status</function>
   を使えばバッファの中身の長さをバイト単位で取得できます。
  </para>
  <caution>
   <simpara>
    <function>ob_get_clean</function> や <function>ob_get_flush</function>
    をコールすると、アクティブなバッファの中身を返した後、
    そのバッファをオフにします。
   </simpara>
  </caution>
  <para>
   アクティブなバッファの中身は、
   <function>ob_clean</function>, <function>ob_end_clean</function>,
   <function>ob_get_clean</function> を使って削除できます。
  </para>
  <caution>
   <simpara>
    <function>ob_end_clean</function> や <function>ob_get_clean</function>
    を使うと、アクティブなバッファがオフになります。
   </simpara>
  </caution>
 </section>

 <section>
  <title>バッファをオフにする</title>
  <para>
   <function>ob_end_clean</function>, <function>ob_end_flush</function>,
   <function>ob_get_flush</function>, <function>ob_get_clean</function>
   をコールすると、出力バッファをオフにできます。
  </para>
  <warning>
   <simpara>
    <constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant>   
    を指定せずに起動した出力バッファはオフにできず、
    <constant>E_NOTICE</constant> が発生します。
   </simpara>
  </warning>
  <para>
   スクリプトの終了時、または <function>exit</function>
   がコールされるまでに閉じられていないすべての出力バッファは、
   PHP のシャットダウン処理によってフラッシュされ、オフになります。
   バッファは、起動した順序と逆の順序でフラッシュされ、オフになります。
   最後にバッファリングが開始されたものが最初になり、
   最初にバッファリングが開始されたものが最後にフラッシュされ、オフになります。
  </para>
  <caution>
   <simpara>
    バッファの内容をフラッシュしたくない場合は、
    カスタムの出力ハンドラーを使い、シャットダウン中のフラッシュを防ぐべきです。
   </simpara>
  </caution>
 </section>

 <section xml:id="outcontrol.output-handlers">
  <title>出力ハンドラ</title>
  <para>
   出力ハンドラは、出力バッファに関連付けられた <type>callable</type> です。
   <function>ob_clean</function>,
   <function>ob_flush</function>, <function>ob_end_flush</function>,
   <function>ob_get_flush</function>, <function>ob_end_clean</function>,
   <function>ob_get_clean</function> をコールすると呼び出されます。
   また、PHP のシャットダウン処理中にも呼び出されます。
  </para>
  <note>
   <simpara>
    シャットダウン処理は、ハンドラの戻り値をフラッシュします。
   </simpara>
  </note>
  <para>
   出力バッファを開始するときに、ハンドラを省略したり &null; を指定した場合、
   内部的な <literal>"default output handler"</literal>
   が使われます。このハンドラは、呼び出された際にバッファの内容を変更せずに返します。
   出力ハンドラは、バッファの内容を変更 かつ/または 副作用(例:ヘッダの送信)
   をもたせるために使うことができます。
  </para>
  <para>
   PHP には、内部的な出力ハンドラをふたつ持っています:
   <literal>"default output handler"</literal>
   と <literal>"URL-Rewriter"</literal> 
   (これは独自の出力バッファに統合されており、2つまでしか起動できません) 
   がそうです。
  </para>
  <para>
   PHP 本体にバンドルされている拡張モジュールには、
   追加の出力ハンドラが4つあります:
   <function>mb_output_handler</function>, <function>ob_gzhandler</function>,
   <function>ob_iconv_handler</function>, <function>ob_tidyhandler</function> です。
  </para>
 </section>

 <section xml:id="outcontrol.working-with-output-handlers">
  <title>Working With Output Handlers</title>
  <para>
   When invoked, output handlers are passed the contents of the buffer
   and a bitmask indicating the status of output buffering.
  </para>
  <para>
   <methodsynopsis>
    <type>string</type>
    <methodname>
     <replaceable>handler</replaceable>
    </methodname>
    <methodparam>
     <type>string</type>
     <parameter>buffer</parameter>
    </methodparam>
    <methodparam choice="opt">
     <type>int</type>
     <parameter>phase</parameter>
    </methodparam>
   </methodsynopsis>
   <variablelist>
    <varlistentry>
     <term><parameter>buffer</parameter></term>
     <listitem>
      <simpara>
       Contents of the output buffer.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>phase</parameter></term>
     <listitem>
      <simpara>
       Bitmask of
       <link linkend="constant.php-output-handler-start">
        <constant>PHP_OUTPUT_HANDLER_<replaceable>*</replaceable></constant>
        constants
       </link>.
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <warning>
   <simpara>
    Calling any of the following functions from within an output handler
    will result in a fatal error:
    <function>ob_clean</function>, <function>ob_end_clean</function>,
    <function>ob_end_flush</function>, <function>ob_flush</function>,
    <function>ob_get_clean</function>, <function>ob_get_flush</function>,
    <function>ob_start</function>.
   </simpara>
  </warning>
  <note>
   <simpara>
    If the <constant>PHP_OUTPUT_HANDLER_DISABLED</constant> of a handler is set,
    the handler will not be invoked by calling
    <function>ob_end_clean</function>, <function>ob_end_flush</function>,
    <function>ob_get_clean</function>, <function>ob_get_flush</function>
    or during PHP's shutdown process.
    This flag has no effect on when calling <function>ob_clean</function>
    or <function>ob_flush</function>.
   </simpara>
  </note>
  <note>
   <simpara>
    The working directory of the script can change inside the shutdown function
    under some web servers, e.g. Apache or the built-in web server.
   </simpara>
  </note>
 </section>

 <section xml:id="outcontrol.flags-passed-to-output-handlers">
  <title>Flags Passed To Output Handlers</title>
  <para>
   The bitmask passed to the second <parameter>phase</parameter> parameter
   of the output handler provides information on the invocation of the handler.
  </para>
  <note>
   <simpara>
    The bitmask can include more than one flag
    and the bitwise <literal>&amp;</literal> operator should be used
    to check whether a flag is set.
   </simpara>
  </note>
  <warning>
   <simpara>
    The value of <constant>PHP_OUTPUT_HANDLER_WRITE</constant> and its alias
    <constant>PHP_OUTPUT_HANDLER_CONT</constant> is <literal>0</literal>
    therefore whether it is set can only be determined
    by using an
    <link linkend="language.operators.comparison">equality operator</link>
    (<literal>==</literal> or <literal>===</literal>).
   </simpara>
  </warning>
  <para>
   The following flags are set in a specific phase of the handler's lifecycle:
   <constant>PHP_OUTPUT_HANDLER_START</constant> is set
   when a handler is invoked for the first time.
   <constant>PHP_OUTPUT_HANDLER_FINAL</constant>
   or its alias <constant>PHP_OUTPUT_HANDLER_END</constant>
   is set when a handler is invoked for the last time,
   i.e. it is being turned off. This flag is also set
   when buffers are being turned off by PHP's shutdown process.
  </para>
  <para>
   The following flags are set by a specific invocation of the handler:
   <constant>PHP_OUTPUT_HANDLER_FLUSH</constant> is set
   when the handler is invoked by calling <function>ob_flush</function>.
   <constant>PHP_OUTPUT_HANDLER_WRITE</constant>
   or its alias <constant>PHP_OUTPUT_HANDLER_CONT</constant>
   is set when the size of its contents equals or exceeds the size of the buffer
   and the handler is invoked while the buffer is being automatically flushed.
   <constant>PHP_OUTPUT_HANDLER_FLUSH</constant> is set
   when the handler is invoked by calling <function>ob_clean</function>,
   <function>ob_end_clean</function> or <function>ob_get_clean</function>.
   When <function>ob_end_clean</function> or <function>ob_get_clean</function>
   is called, <constant>PHP_OUTPUT_HANDLER_FINAL</constant> is set as well.
  </para>
  <note>
   <simpara>
    When <function>ob_end_flush</function> or <function>ob_get_flush</function>
    is called, <constant>PHP_OUTPUT_HANDLER_FINAL</constant> is set
    but <constant>PHP_OUTPUT_HANDLER_FLUSH</constant> is not.
   </simpara>
  </note>
 </section>

 <section xml:id="outcontrol.output-handler-return-values">
  <title>Output Handler Return Values</title>
  <para>
   The return value of the output handler is internally coerced into a string
   following standard PHP type semantics, with two exceptions:
   <type>array</type>s and <type>bool</type>eans.
  </para>
  <para>
   Arrays are converted into the string <literal>"Array"</literal>
   but the <literal>Array to string conversion</literal> warning
   is not triggered.
  </para>
  <para>
   If the handler returns &false; the contents of the buffer are returned.
   If the handler returns &true; an empty string is returned.
  </para>
  <note>
   <simpara>
    If a handler returns &false; or throws an exception
    its <constant>PHP_OUTPUT_HANDLER_DISABLED</constant> status flag is set.
   </simpara>
  </note>
 </section>

 <section>
  <title>Exceptions Thrown In Output Handlers</title>
  <para>
   If an uncaught exception is thrown in an output handler
   the program terminates and the handler is invoked
   by the shutdown process after which
   the <literal>"Uncaught Exception"</literal> error message is flushed.
  </para>
  <para>
   If the uncaught exception is thrown in a handler
   invoked by <function>ob_flush</function>,
   <function>ob_end_flush</function> or <function>ob_get_flush</function>,
   the contents of the buffer are flushed before the error message.
  </para>
  <para>
   If an uncaught exception is thrown in an output handler during shutdown,
   the handler is terminated and neither the contents of the buffer
   nor the error message is flushed.
  </para>
  <note>
   <simpara>
    If a handler throws an exception
    its <constant>PHP_OUTPUT_HANDLER_DISABLED</constant> status flag is set.
   </simpara>
  </note>
 </section>

 <section>
  <title>Errors Raised In Output Handlers</title>
  <para>
   If a non-fatal error is raised in an output handler
   the program continues execution.
  </para>
  <para>
   If the non-fatal error is raised in a handler invoked by
   <function>ob_flush</function>, <function>ob_end_flush</function>
   or <function>ob_get_flush</function>,
   the buffer flushes certain data depending on the return value of the handler.
   If the handler returns &false; the buffer and the error message are flushed.
   If the returns anything else the handler return value is flushed
   but not the error message.
  </para>
  <note>
   <simpara>
    If a handler returns &false;
    its <constant>PHP_OUTPUT_HANDLER_DISABLED</constant> status flag is set.
   </simpara>
  </note>
  <para>
   If a fatal error is raised in an output handler
   the program terminates and the handler is invoked
   by the shutdown process after which the error message is flushed.
  </para>
  <para>
   If the fatal error is raised in a handler
   invoked by <function>ob_flush</function>,
   <function>ob_end_flush</function> or <function>ob_get_flush</function>,
   the contents of the buffers are flushed before the error message.
  </para>
  <para>
   If a fatal error is raised in an output handler during shutdown
   the program terminates without flushing the buffer or the error message.
  </para>
 </section>

 <section>
  <title>Output In Output Handlers</title>
  <para>
   In specific circumstances, output produced in the handler is flushed
   along with the contents of the buffer.
   This output is not appended to the buffer and is not part of the string
   returned by <function>ob_get_flush</function>.
  </para>
  <para>
   During flush operations (calling <function>ob_flush</function>,
   <function>ob_end_flush</function>, <function>ob_get_flush</function>
   and during shutdown)
   if the return value of a handler is &false;
   the contents of the buffer are flushed followed by the output.
   If the handler is not invoked during shutdown
   the handler throwing an exception or <function>exit</function> being called
   results in the same behavior.
  </para>
  <note>
   <simpara>
    If a handler returns &false;
    its <constant>PHP_OUTPUT_HANDLER_DISABLED</constant> status flag is set.
   </simpara>
  </note>
 </section>

 <section>
  <title>Output Handler Status Flags</title>
  <para>
   The
   <link linkend="outcontrol.constants.flags-returned-by-handler">
    handler status flags
   </link> of the buffer's <literal>flags</literal> bitmask
   are set every time to the output handler is invoked
   and are part of the <literal>flags</literal> returned by
   <function>ob_get_status</function>.
   If the handler successfully executes and does not return &false;,
   <constant>PHP_OUTPUT_HANDLER_STARTED</constant> and
   <constant>PHP_OUTPUT_HANDLER_PROCESSED</constant> is set.
   If the handler returns &false; or throws an exception while executing,
   <constant>PHP_OUTPUT_HANDLER_STARTED</constant> and
   <constant>PHP_OUTPUT_HANDLER_DISABLED</constant> is set.
  </para>
  <note>
   <simpara>
    If the <constant>PHP_OUTPUT_HANDLER_DISABLED</constant> of a handler is set,
    the handler will not be invoked by calling
    <function>ob_end_clean</function>, <function>ob_end_flush</function>,
    <function>ob_get_clean</function>, <function>ob_get_flush</function>
    or during PHP's shutdown process.
    This flag has no effect on when calling <function>ob_clean</function>
    or <function>ob_flush</function>.
   </simpara>
  </note>
 </section>

</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
